if &t_Co > 1
  syntax on
endif
set encoding=UTF-8
set nocompatible
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
set number
set relativenumber
set cursorline
set wrap
set showcmd
set wildmenu
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
set smartcase
set ttimeout
set ttimeoutlen=100
set showcmd
set tabstop=8
set softtabstop=4
set expandtab
set shiftwidth=4
set smarttab
set autoindent
set smartindent
set clipboard=unnamedplus

if has('mouse')
  set mouse=a
endif
set encoding=utf-8
let &t_ut=''
set list
set listchars=tab:▸\ ,trail:▫
set backspace=indent,eol,start
" set iskeyword+=-
set autochdir
set scrolloff=3
set foldmethod=indent
set foldlevel=99
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" keymaps
let mapleader=" "
" fast move
noremap H 7h
noremap J 5j
noremap K 5k
noremap L 7l
noremap <C-e> $
noremap <C-s> ^
" yank to end of line
nnoremap Y y$
" join two lines (concatenate)
noremap ct :join<CR>
" search result
noremap = nzz
noremap - Nzz
" nohlsearch
noremap <LEADER>h :nohlsearch<CR>
" number
noremap <LEADER>n :set relativenumber!<CR>
" command
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;
" split window
map Sh :set nosplitright<CR>:vsplit<CR>
map Sj :set splitbelow<CR>:split<CR>
map Sk :set nosplitbelow<CR>:split<CR>
map Sl :set splitright<CR>:vsplit<CR>
map SH <C-w>H
map SJ <C-w>J
map SK <C-w>K
map SL <C-w>L
map sh <C-w>h
map sj <C-w>j
map sk <C-w>k
map sl <C-w>l
map s, <C-w><
map s. <C-w>>
map s- <C-w>-
map s= <C-w>+
" arrows in command mode
cnoremap <C-s> <Home>
cnoremap <C-e> <End>
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-b> <C-Left>
cnoremap <C-f> <C-Right>
" insert mode line edit
inoremap <C-s> <Home>
inoremap <C-e> <End>
inoremap <C-k> <Up>
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-b> <C-Left>
inoremap <C-f> <C-Right>


call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'connorholyday/vim-snazzy'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'ycm-core/YouCompleteMe'
Plug 'preservim/nerdtree' |
  \ Plug 'Xuyuanp/nerdtree-git-plugin' |
  \ Plug 'ryanoasis/vim-devicons' |
  \ Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'dense-analysis/ale'
Plug 'preservim/tagbar'
Plug 'mbbill/undotree'
Plug 'dhruvasagar/vim-table-mode'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
" Plug 'vimwiki/vimwiki'
Plug 'junegunn/fzf'
Plug 'Yggdroot/indentLine'
Plug 'junegunn/vim-peekaboo'
Plug 'kshenoy/vim-signature'
Plug 'tpope/vim-fugitive'
Plug 'rbong/vim-flog'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/vim-cursorword'
Plug 'jiangmiao/auto-pairs'
Plug 'gcmt/wildfire.vim'
Plug 'godlygeek/tabular'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
" Plug 'tmhedberg/SimpylFold'
Plug 'Konfekt/FastFold'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'preservim/nerdcommenter'
Plug 'andymass/vim-matchup'
Plug 'machakann/vim-highlightedyank'
Plug 'embear/vim-localvimrc'
call plug#end()

" color and themes
" airline
let g:airline_theme='dark'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.colnr = '  '
let g:airline_symbols.linenr = ' :'
let g:airline_symbols.maxlinenr = ' ☰'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
nnoremap <LEADER>tn :tabnew<CR>
nmap <LEADER>1 <Plug>AirlineSelectTab1
nmap <LEADER>2 <Plug>AirlineSelectTab2
nmap <LEADER>3 <Plug>AirlineSelectTab3
nmap <LEADER>4 <Plug>AirlineSelectTab4
nmap <LEADER>5 <Plug>AirlineSelectTab5
nmap <LEADER>6 <Plug>AirlineSelectTab6
nmap <LEADER>7 <Plug>AirlineSelectTab7
nmap <LEADER>8 <Plug>AirlineSelectTab8
nmap <LEADER>9 <Plug>AirlineSelectTab9
nmap <LEADER>0 <Plug>AirlineSelectTab0
nmap <LEADER>- <Plug>AirlineSelectPrevTab
nmap <LEADER>= <Plug>AirlineSelectNextTab

" colortheme
color snazzy
let g:SnazzyTransparent = 0

" ycm
set completeopt-=preview
let g:ycm_auto_hover=""
nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap gc <Plug>(YCMHover)
nnoremap gt :YcmCompleter GetType<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>

" man
runtime! ftplugin/man.vim

" nerdtree
noremap tt :NERDTreeToggle<CR>
let g:NERDTreeGitStatusUseNerdFonts = 1

" tagbar
nnoremap <F8> :TagbarToggle<CR>

" undotree
nnoremap <F5> :UndotreeToggle<CR>
if has("persistent_undo")
  let target_path = expand('~/.undodir')

  " create the directory and any parent directories
  " if the location does not exist.
  if !isdirectory(target_path)
    call mkdir(target_path, "p", 0700)
  endif

  let &undodir=target_path
  set undofile
endif

" tabularize
noremap tb :Tabularize<SPACE>/

" highlighting yank
let g:highlightedyank_highlight_duration = 500

" wildfire
nmap <leader>s <Plug>(wildfire-quick-select)

" fasyfold
nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
let g:markdown_folding = 1
let g:rst_fold_enabled = 1
let g:tex_fold_enabled = 1
let g:vimsyn_folding = 'af'
let g:xml_syntax_folding = 1
let g:javaScript_fold = 1
let g:sh_fold_enabled= 7
let g:zsh_fold_enable = 1
let g:ruby_fold = 1
let g:perl_fold = 1
let g:perl_fold_blocks = 1
let g:r_syntax_folding = 1
let g:rust_fold = 1
let g:php_folding = 1
let g:fortran_fold=1
let g:clojure_fold = 1
let g:baan_fold=1
autocmd FileType c,cpp setlocal foldmethod=syntax
autocmd FileType python setlocal foldmethod=indent

" localvimrc
let g:localvimrc_ask = 0

" gitgutter
nmap <LEADER>gp <Plug>(GitGutterPreviewHunk)
nmap <LEADER>gs <Plug>(GitGutterStageHunk)
nmap <LEADER>gu <Plug>(GitGutterUndoHunk)
